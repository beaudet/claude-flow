{
  "timestamp": "2025-07-30T02:52:02.103Z",
  "summary": {
    "cliCommands": 1,
    "scriptCommands": 64,
    "workflows": 0,
    "agents": 4
  },
  "details": {
    "cliCommands": [
      {
        "name": "main",
        "path": "/home/bob/src/claude-flow/dist/cli/main.js",
        "helpAvailable": false,
        "versionAvailable": false
      }
    ],
    "scriptCommands": [
      {
        "name": "dev",
        "command": "tsx src/cli/main.ts",
        "category": "development"
      },
      {
        "name": "build",
        "command": "npm run clean && npm run update-version && npm run build:esm && npm run build:cjs && npm run build:binary",
        "category": "build"
      },
      {
        "name": "update-version",
        "command": "node scripts/update-bin-version.js",
        "category": "other"
      },
      {
        "name": "clean",
        "command": "rm -rf dist dist-cjs dist-enterprise",
        "category": "other"
      },
      {
        "name": "build:esm",
        "command": "tsc -p tsconfig.enterprise.json",
        "category": "build"
      },
      {
        "name": "build:esm-extended",
        "command": "tsc -p tsconfig.esm.json",
        "category": "build"
      },
      {
        "name": "build:esm-full",
        "command": "tsc",
        "category": "build"
      },
      {
        "name": "build:cjs",
        "command": "tsc -p tsconfig.cjs-minimal.json",
        "category": "build"
      },
      {
        "name": "build:cjs-full",
        "command": "tsc -p tsconfig.cjs.json",
        "category": "build"
      },
      {
        "name": "build:ts",
        "command": "npm run build:esm && npm run build:cjs",
        "category": "build"
      },
      {
        "name": "build:binary",
        "command": "pkg dist/cli/main.js --targets node20-linux-x64,node20-macos-x64,node20-win-x64 --output bin/claude-flow",
        "category": "build"
      },
      {
        "name": "build:simple",
        "command": "npm run build:ts && pkg dist/cli/simple-cli.js --output bin/claude-flow-simple",
        "category": "build"
      },
      {
        "name": "typecheck",
        "command": "tsc -p tsconfig.enterprise.json --noEmit",
        "category": "other"
      },
      {
        "name": "typecheck:esm",
        "command": "tsc -p tsconfig.esm.json --noEmit",
        "category": "other"
      },
      {
        "name": "typecheck:full",
        "command": "tsc --noEmit",
        "category": "other"
      },
      {
        "name": "typecheck:watch",
        "command": "tsc --noEmit --watch",
        "category": "other"
      },
      {
        "name": "dev:build",
        "command": "tsc --watch",
        "category": "build"
      },
      {
        "name": "test",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest --bail --maxWorkers=1 --forceExit",
        "category": "testing"
      },
      {
        "name": "test:watch",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest --watch",
        "category": "testing"
      },
      {
        "name": "test:unit",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit",
        "category": "testing"
      },
      {
        "name": "test:integration",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration",
        "category": "testing"
      },
      {
        "name": "test:e2e",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e",
        "category": "testing"
      },
      {
        "name": "test:performance",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/performance/__tests__",
        "category": "testing"
      },
      {
        "name": "test:performance:runner",
        "command": "node scripts/performance-test-runner.js",
        "category": "testing"
      },
      {
        "name": "test:comprehensive",
        "command": "node scripts/test-comprehensive.js",
        "category": "testing"
      },
      {
        "name": "test:cli",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/cli/__tests__",
        "category": "testing"
      },
      {
        "name": "test:coverage",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text",
        "category": "testing"
      },
      {
        "name": "test:coverage:enforce",
        "command": "node scripts/test-coverage-enforcer.js",
        "category": "testing"
      },
      {
        "name": "test:coverage:report",
        "command": "npm run test:coverage && npm run test:coverage:enforce",
        "category": "testing"
      },
      {
        "name": "test:coverage:unit",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/unit --coverage",
        "category": "testing"
      },
      {
        "name": "test:coverage:integration",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration --coverage",
        "category": "testing"
      },
      {
        "name": "test:coverage:e2e",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e --coverage",
        "category": "testing"
      },
      {
        "name": "test:ci",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest --ci --coverage --maxWorkers=2",
        "category": "testing"
      },
      {
        "name": "test:debug",
        "command": "NODE_OPTIONS='--experimental-vm-modules --inspect-brk' jest --runInBand --no-cache",
        "category": "testing"
      },
      {
        "name": "test:comprehensive:verbose",
        "command": "node scripts/test-comprehensive.js --verbose",
        "category": "testing"
      },
      {
        "name": "test:comprehensive:full",
        "command": "node scripts/test-comprehensive.js --load --docker --npx",
        "category": "testing"
      },
      {
        "name": "test:load",
        "command": "node scripts/test-comprehensive.js --load",
        "category": "testing"
      },
      {
        "name": "test:docker",
        "command": "node scripts/test-comprehensive.js --docker",
        "category": "testing"
      },
      {
        "name": "test:npx",
        "command": "node scripts/test-comprehensive.js --npx",
        "category": "testing"
      },
      {
        "name": "test:health",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/integration/system-integration.test.ts --testNamePattern='Health'",
        "category": "testing"
      },
      {
        "name": "test:swarm",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/e2e/swarm-coordination.test.ts",
        "category": "testing"
      },
      {
        "name": "test:benchmark",
        "command": "NODE_OPTIONS='--experimental-vm-modules' jest src/__tests__/performance/benchmark.test.ts",
        "category": "testing"
      },
      {
        "name": "test:claude4",
        "command": "./scripts/test-claude-4.sh",
        "category": "testing"
      },
      {
        "name": "test:claude4:verbose",
        "command": "./scripts/test-claude-4.sh --verbose",
        "category": "testing"
      },
      {
        "name": "test:claude4:unit",
        "command": "./scripts/test-claude-4.sh --unit-only",
        "category": "testing"
      },
      {
        "name": "test:claude4:config",
        "command": "./scripts/test-claude-4.sh --config-only",
        "category": "testing"
      },
      {
        "name": "lint",
        "command": "eslint src --ext .ts --max-warnings 0",
        "category": "quality"
      },
      {
        "name": "lint:fix",
        "command": "eslint src --ext .ts --fix",
        "category": "quality"
      },
      {
        "name": "lint:critical-fix",
        "command": "node scripts/fix-lint-critical.js",
        "category": "quality"
      },
      {
        "name": "build:validate",
        "command": "node scripts/build-validation.js",
        "category": "build"
      },
      {
        "name": "security:scan",
        "command": "node scripts/security-scanner.js",
        "category": "security"
      },
      {
        "name": "security:enforce",
        "command": "npm run security:scan",
        "category": "security"
      },
      {
        "name": "format",
        "command": "prettier --write 'src/**/*.{ts,js,json}'",
        "category": "other"
      },
      {
        "name": "diagnostics",
        "command": "node -e \"import('./dist/monitoring/diagnostics.js').then(m => m.DiagnosticManager.quickDiagnostic().then(console.log))\"",
        "category": "other"
      },
      {
        "name": "health-check",
        "command": "node -e \"import('./dist/monitoring/health-check.js').then(m => new m.HealthCheckManager().performHealthCheck().then(console.log))\"",
        "category": "other"
      },
      {
        "name": "postinstall",
        "command": "node scripts/install.js && node scripts/install-arm64.js",
        "category": "other"
      },
      {
        "name": "prepublishOnly",
        "command": "npm run update-version",
        "category": "other"
      },
      {
        "name": "publish:alpha",
        "command": "npm publish --tag alpha",
        "category": "other"
      },
      {
        "name": "publish:major",
        "command": "npm version major && npm publish",
        "category": "other"
      },
      {
        "name": "publish:minor",
        "command": "npm version minor && npm publish",
        "category": "other"
      },
      {
        "name": "publish:patch",
        "command": "npm version patch && npm publish",
        "category": "other"
      },
      {
        "name": "prepack",
        "command": "echo 'Alpha release - skipping build for now'",
        "category": "other"
      },
      {
        "name": "postpack",
        "command": "echo 'Package created successfully'",
        "category": "other"
      },
      {
        "name": "prepare-publish",
        "command": "node scripts/prepare-publish.js",
        "category": "other"
      }
    ],
    "workflows": [],
    "agents": [
      {
        "directory": "src/agents",
        "fileCount": 2,
        "files": [
          "agent-manager.ts",
          "agent-registry.ts"
        ]
      },
      {
        "directory": "src/swarm",
        "fileCount": 27,
        "files": [
          "__tests__",
          "advanced-orchestrator.ts",
          "claude-code-interface.ts",
          "claude-flow-executor.ts",
          "coordinator.ts",
          "direct-executor.ts",
          "dockerized-executor.ts",
          "executor-v2.ts",
          "executor.ts",
          "hive-mind-integration.ts"
        ]
      },
      {
        "directory": "src/hive-mind",
        "fileCount": 5,
        "files": [
          "__tests__",
          "core",
          "index.ts",
          "integration",
          "types.ts"
        ]
      },
      {
        "directory": "src/services",
        "fileCount": 1,
        "files": [
          "agentic-flow-hooks"
        ]
      }
    ],
    "configurations": []
  }
}
